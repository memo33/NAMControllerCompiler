<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="NAMControllerCompiler" default="dist" basedir=".">
    <property name="targetversion" value="1.6" />
    <property name="sourceversion" value="1.6" />
    <property name="project.version" value="1.1.0" />
    <property name="MyApp" value="${ant.project.name}" />
    <property name="MyApp-zipname" value="${ant.project.name}_${project.version}" />
    <property name="MyApp.jar" value="${MyApp}.jar" />
    <property name="src" location="src" relative="true" />
    <property name="srctest" location="test" relative="true" />
    <property name="bin" location="bin" relative="true" />
    <property name="bintest" location="bintest" relative="true" />
    <property name="lib" location="lib" relative="true" />
    <property name="doc" location="doc" relative="true" />
    <property name="dist" location="dist" relative="true" />
    <property name="xml.resources" location="resources/xml" relative="true" />
    <property name="rul2.structure.file" value="RUL2_IID_structure" />
    <property name="test.resources" location="resources/test" relative="true" />
    
    <path id="build.classpath">
        <fileset dir="${lib}" includes="jDBPFX*.jar" />
        <pathelement path="${bin}" />
    </path>

    <target name="resolve" description="retrieve dependencies with ivy">
        <mkdir dir="${lib}" />
        <ivy:retrieve conf="mainapp"/>
    </target>
    
    <target name="clean" description="delete generated files">
        <delete dir="${bin}" />
        <delete dir="${bintest}" />
        <delete dir="${doc}" />
        <delete dir="${dist}" />
        <delete file="TEST-testsuites.AllUnitTests.txt" />
        <delete file="TEST-testsuites.AllIntegrationTests.txt" />
        <delete file="${MyApp.jar}" />
        <delete file="${MyApp}.bat" />
        <delete file="${MyApp}_developer.bat" />
        <delete file="${MyApp}_debug.bat" />
    </target>
    
    <target name="compile" depends="resolve" description="compile the sources">
        <mkdir dir="${bin}" />
        <javac source="${sourceversion}" target="${targetversion}" srcdir="${src}" destdir="${bin}" includeantruntime="false">
            <classpath refid="build.classpath" />
        </javac>
    	<copy todir="${bin}">
            <fileset dir="${src}" includes="**/*.txt" />
    	</copy>
    </target>
    
    <target name="doc" depends="compile" description="generate documentation">
        <mkdir dir="${doc}" />
        <javadoc
            sourcepath="${src}"
            destdir="${doc}"
            packagenames="*"
            link="http://docs.oracle.com/javase/7/docs/api/"
            classpathref="build.classpath"
        />
    </target>
    
    <target name="batchfiles" description="generate batch files">
        <echo file="${MyApp}.bat">if "%~1"=="" goto interactive
cd %1
cd ../..
:interactive
java -jar ${MyApp}.jar %* || %windir%\SysWOW64\java -jar ${MyApp}.jar %*</echo>
        <echo file="${MyApp}_developer.bat">java -jar ${MyApp}.jar dev</echo>
        <echo file="${MyApp}_debug.bat">java -jar -ea ${MyApp}.jar debug</echo>
    </target>
    
    <target name="resources" description="copy resource files to appropriate locations in resource folder">
        <copy file="${xml.resources}/${rul2.structure.file}_default.xml"
            tofile="${xml.resources}/${rul2.structure.file}.xml"
            preservelastmodified="true"
            overwrite="true"
        />
        <copy file="${xml.resources}/${rul2.structure.file}_default.xml"
            tofile="${test.resources}/xml/${rul2.structure.file}.xml"
            preservelastmodified="true"
            overwrite="true"
        />
        <copy file="${xml.resources}/${rul2.structure.file}.dtd"
            todir="${test.resources}/xml/"
            preservelastmodified="true"
            overwrite="true"
        />
    </target>
    
    <target name="dist" depends="compile,resolve,batchfiles,resources" description="create binary distribution">
        <!-- class path file list for manifest file -->
        <pathconvert property="manifest.build.classpath" pathsep=" ">
            <path refid="build.classpath"/>
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.jar" to="lib/*.jar"/>
                </chainedmapper>
            </mapper>
        </pathconvert>
    
        <!-- Initialization -->
        <delete file="${MyApp.jar}" />
        <delete dir="${dist}" />
        <mkdir dir="${dist}" />
        
        <!-- Create jar file -->
        <jar jarfile="${MyApp.jar}" basedir="${bin}">
            <manifest>
                <attribute name="Main-Class" value="controller.NAMControllerCompilerMain"/>
                <attribute name="Class-Path" value="${manifest.build.classpath}"/>
            </manifest>
        	<!-- <zipfileset dir="${src}" includes="**/*.txt" /> -->
        </jar>
        
        <!-- Create zip file with sources -->
        <zip destfile="${dist}/${MyApp-zipname}_sources_and_tests.zip">
            <fileset dir="${basedir}" includes="${manifest.build.classpath}" />
            <fileset dir="${basedir}" includes="${MyApp}*,build.xml,ivy.xml,README.md,LICENSE" />
            <!-- source files -->
            <fileset dir="${basedir}" includes="${src}/**" />            
            <fileset dir="${basedir}" includes="${srctest}/**" />
            <!-- resource files -->            
            <fileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}.dtd" />
            <fileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}_default.xml" />
            <zipfileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}_default.xml" fullpath="${xml.resources}/${rul2.structure.file}.xml" />
            <fileset dir="${basedir}" includes="${test.resources}/Controller/**" />
            <zipfileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}_default.xml" fullpath="${test.resources}/xml/${rul2.structure.file}.xml" />
            <zipfileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}.dtd" fullpath="${test.resources}/xml/${rul2.structure.file}.dtd" />
        </zip>
        
        <!-- Create dist zip file -->
        <zip destfile="${dist}/${MyApp-zipname}.zip">
            <fileset dir="${basedir}" includes="${manifest.build.classpath}" />
            <fileset dir="${basedir}" includes="${MyApp}*,README.md,LICENSE" />
            <fileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}.dtd" />
            <fileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}_default.xml" />
            <zipfileset dir="${basedir}" includes="${xml.resources}/${rul2.structure.file}_default.xml" fullpath="${xml.resources}/${rul2.structure.file}.xml" />
        </zip>
        
    </target>
    
    
    <!-- ================================
          tests
         ================================ -->

    <path id="test.build.classpath">
        <fileset dir="${lib}" />
        <pathelement path="${bintest}" />
        <pathelement path="${bin}" />
    </path>

    <target name="resolvetests" description="retrieve dependencies for tests with ivy">
        <ivy:retrieve conf="tests"/>
    </target>
    
    <target name="compiletests" depends="compile,resolvetests" description="compile the tests">
        <mkdir dir="${bintest}" />
        <javac source="${sourceversion}" target="${targetversion}" srcdir="${srctest}" destdir="${bintest}" includeantruntime="false">
            <classpath refid="test.build.classpath" />
        </javac>
    </target>
	
	<target name="deletexml" description="deletes xml backup so that syntax check fails if supposed to">
        <delete file="${test.resources}/xml/${rul2.structure.file}.xml~1" />
	</target>
    
    <target name="test" depends="compiletests,resources,deletexml">
        <junit printsummary="yes" fork="yes" haltonfailure="yes">
            <classpath refid="test.build.classpath" />
            <formatter type="plain"/>
            <test name="testsuites.AllUnitTests"/>
            <test name="testsuites.AllIntegrationTests"/>
        </junit>
    </target>
    
</project>
